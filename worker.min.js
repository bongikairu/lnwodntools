"use strict";function _toConsumableArray(arr){return _arrayWithoutHoles(arr)||_iterableToArray(arr)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(iter){if(Symbol.iterator in Object(iter)||Object.prototype.toString.call(iter)==="[object Arguments]")return Array.from(iter)}function _arrayWithoutHoles(arr){if(Array.isArray(arr)){for(var i=0,arr2=new Array(arr.length);i<arr.length;i++){arr2[i]=arr[i]}return arr2}}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable});keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key])})}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source))}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))})}}return target}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true})}else{obj[key]=value}return obj}var enhancePercentage="\n0=100/0/1/1\n1=90/0/1/1\n2=80/0/1/1\n3=70/0/1/1\n4=50/0/1/1\n5=45/0/2/2\n6=40/35/2/2\n7=35/35/2/2\n8=35/35/2/2\n9=35/35/2/2\n10=30/0/3/5\n11=30/35/3/5\n12=30/35/3/5\n13=30/35/3/5\n14=30/35/3/5\n15=20/0/4/8\n16=20/35/4/8\n17=20/35/4/8\n18=20/35/4/8\n19=20/35/4/8\n20=10/0/5/10\n21=10/35/5/10\n22=10/35/5/10\n23=10/35/5/10\n24=10/35/5/10\n25=5/35/6/12\n26=5/35/6/12\n27=5/35/6/12\n28=5/35/6/12\n29=5/35/6/12\n30=2/35/8/14\n";var enhancePercentageDict=enhancePercentage.split("\n").filter(function(x){return x!==""}).map(function(x){return x.split("=")}).map(function(x){return{from:x[0],chance:x[1].split("/")}}).map(function(x){return{from:x.from,successChance:parseInt(x.chance[0]),breakChance:parseInt(x.chance[1]),stoneUsage:parseInt(x.chance[2]),jellyUsage:parseInt(x.chance[3])}}).reduce(function(acc,cur){return _objectSpread({},acc,_defineProperty({},cur.from,cur))},{});var simulateEnhance=function simulateEnhance(from,to){var use_jelly=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var added_chance=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;var multiply_chance=arguments.length>4&&arguments[4]!==undefined?arguments[4]:1;var iteration=0;var stone_used=0;var jelly_used=0;var progression=[];var current=from;var min_level=current;while(current<to){iteration+=1;var chance=enhancePercentageDict[current];stone_used+=chance.stoneUsage;var r_success=Math.random()*100;if(r_success<=(chance.successChance+added_chance)*multiply_chance){current+=1;progression.push("+")}else{if(use_jelly){jelly_used+=chance.jellyUsage;progression.push("#")}else{var r_break=Math.random()*100;if(r_break<=chance.breakChance){current-=1;progression.push("-");if(current<min_level)min_level=current}else{progression.push("#")}}}}return{iteration:iteration,gold_usage:iteration*10000,stone_used:stone_used,jelly_used:jelly_used,min_level:min_level,progression:progression}};var averageSimulateEnhance=function averageSimulateEnhance(from,to){var use_jelly=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var added_chance=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;var multiply_chance=arguments.length>4&&arguments[4]!==undefined?arguments[4]:1;var iteration=arguments.length>5&&arguments[5]!==undefined?arguments[5]:1000;var simulations=[];var sum_stone_used=0;var max_stone_used=0;var min_stone_used=999999999;for(var i=0;i<iteration;i++){var sim=simulateEnhance(from,to,use_jelly,added_chance,multiply_chance);simulations.push(sim);sum_stone_used+=sim.stone_used;if(sim.stone_used>max_stone_used){max_stone_used=sim.stone_used}if(sim.stone_used<min_stone_used){min_stone_used=sim.stone_used}}return{simulations:simulations,average_stone_used:sum_stone_used/iteration,max_stone_used:max_stone_used,min_stone_used:min_stone_used}};onmessage=function onmessage(e){console.log(e);if(e.data.type==="simulateEnhance"){var output=averageSimulateEnhance.apply(void 0,_toConsumableArray(e.data.args));var truncated_output=_objectSpread({},output,{simulations:[]});console.log(truncated_output);postMessage({type:"simulateEnhance",data:truncated_output})}};
